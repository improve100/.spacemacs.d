;; -*- mode: emacs-lisp; eval: (progn (pp-buffer) (indent-buffer)) -*-
((def-persp nil ((def-buffer "学习slam理论.org" "/home/tong/SparkleShare/mynotes/mathematics/学习slam理论.org" org-mode) (def-buffer "math" "/home/tong/.spacemacs.d/snipptes/latex-mode/math" fundamental-mode) (def-buffer "matrix" "/home/tong/.spacemacs.d/snipptes/org-mode/matrix" snippet-mode) (def-buffer "org-mode" "~/.spacemacs.d/snipptes/org-mode/" dired-mode) (def-buffer "snipptes" "~/.spacemacs.d/snipptes/" dired-mode) (def-buffer "latex-mode" "~/.spacemacs.d/snipptes/latex-mode/" dired-mode) (def-buffer "if" "/home/tong/.spacemacs.d/snipptes/latex-mode/if" snippet-mode) (def-buffer "code<latex-mode>" "/home/tong/.spacemacs.d/snipptes/latex-mode/code" snippet-mode) (def-buffer "figure" "/home/tong/.spacemacs.d/snipptes/latex-mode/figure" snippet-mode) (def-buffer "frac" "/home/tong/.spacemacs.d/snipptes/latex-mode/frac" snippet-mode) (def-buffer "c++-mode" "~/.spacemacs.d/snipptes/c++-mode/" dired-mode) (def-buffer "src" "/home/tong/.spacemacs.d/snipptes/org-mode/src" snippet-mode) (def-buffer "elisp" "/home/tong/.spacemacs.d/snipptes/org-mode/elisp" snippet-mode) (def-buffer "code<org-mode>" "/home/tong/.spacemacs.d/snipptes/org-mode/code" snippet-mode) (def-buffer "blog" "/home/tong/.spacemacs.d/snipptes/org-mode/blog" snippet-mode) (def-buffer "begin_verse" "/home/tong/.spacemacs.d/snipptes/org-mode/begin_verse" snippet-mode) (def-buffer "begin_src" "/home/tong/.spacemacs.d/snipptes/org-mode/begin_src" snippet-mode) (def-buffer "begin_export" "/home/tong/.spacemacs.d/snipptes/org-mode/begin_export" snippet-mode) (def-buffer "begin_example" "/home/tong/.spacemacs.d/snipptes/org-mode/begin_example" snippet-mode) (def-buffer "begin_comment" "/home/tong/.spacemacs.d/snipptes/org-mode/begin_comment" snippet-mode) (def-buffer "begin_center" "/home/tong/.spacemacs.d/snipptes/org-mode/begin_center" snippet-mode) (def-buffer "latex" "/home/tong/.spacemacs.d/snipptes/org-mode/latex" snippet-mode) (def-buffer "tong" "~/" dired-mode) (def-buffer ".spacemacs.d" "~/.spacemacs.d/" dired-mode) (def-buffer "layers" "~/.spacemacs.d/layers/" dired-mode) (def-buffer ".gitignore" "/home/tong/.spacemacs.d/.gitignore" gitignore-mode) (def-buffer ".sparkleshare" "/home/tong/.spacemacs.d/.sparkleshare" fundamental-mode) (def-buffer ".spacemacs.env" "/home/tong/.spacemacs.d/.spacemacs.env" dotenv-mode) (def-buffer "maxsense_lg02.pos" "/home/tong/maxsense_lg02.pos" fundamental-mode) (def-buffer "SparkleShare" "~/SparkleShare/" dired-mode) (def-buffer "mynotes" "~/SparkleShare/mynotes/" dired-mode) (def-buffer "c++" "~/SparkleShare/mynotes/c++/" dired-mode) (def-buffer "abs_test.cpp" "/home/tong/SparkleShare/mynotes/c++/abs_test.cpp" c++-mode) (def-buffer "init.el" "/home/tong/.spacemacs.d/init.el" emacs-lisp-mode) (def-buffer "org_python.org" "/home/tong/SparkleShare/mynotes/emacs/org_python.org" org-mode) (def-buffer "emacs" "~/SparkleShare/mynotes/emacs/" dired-mode) (def-buffer "org_table.org" "/home/tong/SparkleShare/mynotes/emacs/org_table.org" org-mode) (def-buffer "org_org.org" "/home/tong/SparkleShare/mynotes/emacs/org_org.org" org-mode) (def-buffer "org_c++.org" "/home/tong/SparkleShare/mynotes/emacs/org_c++.org" org-mode) (def-buffer "org_uml.org" "/home/tong/SparkleShare/mynotes/emacs/org_uml.org" org-mode) (def-buffer "org_plot.org" "/home/tong/SparkleShare/mynotes/emacs/org_plot.org" org-mode) (def-buffer "c++_test.org" "/home/tong/SparkleShare/mynotes/c++/c++_test.org" org-mode) (def-buffer "cout.cpp" "/home/tong/SparkleShare/mynotes/c++/cout.cpp" c++-mode)) (def-wconf (((min-height . 8) (min-width . 20) (min-height-ignore . 6) (min-width-ignore . 8) (min-height-safe . 2) (min-width-safe . 4) (min-pixel-height . 136) (min-pixel-width . 160) (min-pixel-height-ignore . 102) (min-pixel-width-ignore . 64) (min-pixel-height-safe . 34) (min-pixel-width-safe . 32)) hc (pixel-width . 1920) (pixel-height . 1039) (total-width . 240) (total-height . 61) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 960) (pixel-height . 1039) (total-width . 120) (total-height . 61) (normal-height . 1.0) (normal-width . 0.5) (buffer "学习slam理论.org" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 1318) (start . 58))) (vc (last . t) (pixel-width . 960) (pixel-height . 1039) (total-width . 120) (total-height . 61) (normal-height . 1.0) (normal-width . 0.5) (combination-limit) (leaf (pixel-width . 960) (pixel-height . 520) (total-width . 120) (total-height . 31) (normal-height . 0.5004812319538018) (normal-width . 1.0) (buffer "matrix" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 40) (start . 1))) (leaf (last . t) (pixel-width . 960) (pixel-height . 519) (total-width . 120) (total-height . 30) (normal-height . 0.49951876804619827) (normal-width . 1.0) (buffer "math" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 67) (start . 1)))))) (def-params ((gui-eyebrowse-last-slot . 1) (gui-eyebrowse-current-slot . 1) (gui-eyebrowse-window-configs (1 (((min-height . 8) (min-width . 20) (min-height-ignore . 6) (min-width-ignore . 8) (min-height-safe . 2) (min-width-safe . 4) (min-pixel-height . 136) (min-pixel-width . 160) (min-pixel-height-ignore . 102) (min-pixel-width-ignore . 64) (min-pixel-height-safe . 34) (min-pixel-width-safe . 32)) hc (pixel-width . 1920) (pixel-height . 1039) (total-width . 240) (total-height . 61) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 960) (pixel-height . 1039) (total-width . 120) (total-height . 61) (normal-height . 1.0) (normal-width . 0.5) (buffer "学习slam理论.org" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 1318) (start . 58))) (vc (last . t) (pixel-width . 960) (pixel-height . 1039) (total-width . 120) (total-height . 61) (normal-height . 1.0) (normal-width . 0.5) (combination-limit) (leaf (pixel-width . 960) (pixel-height . 520) (total-width . 120) (total-height . 31) (normal-height . 0.5004812319538018) (normal-width . 1.0) (buffer "matrix" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 40) (start . 1))) (leaf (last . t) (pixel-width . 960) (pixel-height . 519) (total-width . 120) (total-height . 30) (normal-height . 0.49951876804619827) (normal-width . 1.0) (buffer "math" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 67) (start . 1))))) "")))) t nil nil))