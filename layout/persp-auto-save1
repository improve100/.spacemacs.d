;; -*- mode: emacs-lisp; eval: (progn (pp-buffer) (indent-buffer)) -*-
((def-persp nil ((def-buffer "init.el" "/home/tong/.spacemacs.d/init.el" emacs-lisp-mode) (def-buffer "org学习.org" "/home/tong/SparkleShare/mynotes/emacs/org学习.org" org-mode) (def-buffer "README.org" "/home/tong/.emacs.d/layers/+emacs/org/README.org" org-mode)) (def-wconf (((min-height . 4) (min-width . 10) (min-height-ignore . 3) (min-width-ignore . 4) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 68) (min-pixel-width . 90) (min-pixel-height-ignore . 51) (min-pixel-width-ignore . 36) (min-pixel-height-safe . 17) (min-pixel-width-safe . 18)) leaf (pixel-width . 1920) (pixel-height . 1039) (total-width . 213) (total-height . 61) (normal-height . 1.0) (normal-width . 1.0) (buffer "init.el" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 2775) (start . 1313)))) (def-params ((gui-eyebrowse-last-slot . 1) (gui-eyebrowse-current-slot . 1) (gui-eyebrowse-window-configs (1 (((min-height . 4) (min-width . 10) (min-height-ignore . 3) (min-width-ignore . 4) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 68) (min-pixel-width . 90) (min-pixel-height-ignore . 51) (min-pixel-width-ignore . 36) (min-pixel-height-safe . 17) (min-pixel-width-safe . 18)) leaf (pixel-width . 1920) (pixel-height . 1039) (total-width . 213) (total-height . 61) (normal-height . 1.0) (normal-width . 1.0) (buffer "init.el" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 2775) (start . 1313))) "")))) t nil nil) (def-persp "2" ((def-buffer "pose_estimator.hpp" "/home/tong/codes/autonomous_driving/src/localization/logic/hdl_localization/include/hdl_localization/pose_estimator.hpp" c++-mode) (def-buffer "hdl_localization<include>" "~/codes/autonomous_driving/src/localization/logic/hdl_localization/include/hdl_localization/" dired-mode) (def-buffer "include<hdl_localization>" "~/codes/autonomous_driving/src/localization/logic/hdl_localization/include/" dired-mode) (def-buffer "ms_localization_dynamics_publisher" "~/codes/autonomous_driving/src/localization/ros/ms_localization_dynamics_publisher/" dired-mode) (def-buffer "segmap_server.hh" "/home/tong/codes/autonomous_driving/src/localization/logic/ms_localization_segmap_server_lib/include/ms_localization_segmap_server_lib/segmap_server.hh" c++-mode) (def-buffer "ms_localization_segmap_server_lib<include>" "~/codes/autonomous_driving/src/localization/logic/ms_localization_segmap_server_lib/include/ms_localization_segmap_server_lib/" dired-mode) (def-buffer "include<ms_localization_segmap_server_lib>" "~/codes/autonomous_driving/src/localization/logic/ms_localization_segmap_server_lib/include/" dired-mode) (def-buffer "ms_localization_segmap_server_lib<logic>" "~/codes/autonomous_driving/src/localization/logic/ms_localization_segmap_server_lib/" dired-mode) (def-buffer "segmap_server_main.cc" "/home/tong/codes/autonomous_driving/src/localization/ros/ms_localization_segmap_server/src/segmap_server_main.cc" c++-mode) (def-buffer "segmap_server_node_params.hh" "/home/tong/codes/autonomous_driving/src/localization/ros/ms_localization_segmap_server/include/segmap_server_node_params.hh" c++-mode) (def-buffer "segmap_server_node.hh" "/home/tong/codes/autonomous_driving/src/localization/ros/ms_localization_segmap_server/include/segmap_server_node.hh" c++-mode) (def-buffer "CMakeLists.txt" "/home/tong/codes/autonomous_driving/src/localization/ros/ms_localization_ndt/CMakeLists.txt" cmake-mode) (def-buffer "src<ms_localization_ndt>" "~/codes/autonomous_driving/src/localization/ros/ms_localization_ndt/src/" dired-mode) (def-buffer "ndt_localization.launch" "/home/tong/codes/autonomous_driving/src/localization/logic/hdl_localization/launch/ndt_localization.launch" nxml-mode) (def-buffer "launch<hdl_localization>" "~/codes/autonomous_driving/src/localization/logic/hdl_localization/launch/" dired-mode) (def-buffer "segmap_server.launch" "/home/tong/codes/autonomous_driving/src/localization/ros/ms_localization_segmap_server/launch/segmap_server.launch" nxml-mode) (def-buffer "ndt.launch" "/home/tong/codes/autonomous_driving/src/localization/ros/ms_localization_ndt/launch/ndt.launch" nxml-mode) (def-buffer "launch<ms_localization_ndt>" "~/codes/autonomous_driving/src/localization/ros/ms_localization_ndt/launch/" dired-mode) (def-buffer "ndt_node_params.hh" "/home/tong/codes/autonomous_driving/src/localization/ros/ms_localization_ndt/include/ndt_node_params.hh" c++-mode) (def-buffer "include<ms_localization_segmap_server>" "~/codes/autonomous_driving/src/localization/ros/ms_localization_segmap_server/include/" dired-mode) (def-buffer "launch<ms_localization_segmap_server>" "~/codes/autonomous_driving/src/localization/ros/ms_localization_segmap_server/launch/" dired-mode) (def-buffer "segmap_server_node.cc" "/home/tong/codes/autonomous_driving/src/localization/ros/ms_localization_segmap_server/src/segmap_server_node.cc" c++-mode) (def-buffer "src<ms_localization_segmap_server>" "~/codes/autonomous_driving/src/localization/ros/ms_localization_segmap_server/src/" dired-mode) (def-buffer "ms_localization_segmap_server" "~/codes/autonomous_driving/src/localization/ros/ms_localization_segmap_server/" dired-mode) (def-buffer "ndt_gpu_localization_nodelet.cpp" "/home/tong/codes/autonomous_driving/src/localization/logic/hdl_localization/apps/ndt_gpu_localization_nodelet.cpp" c++-mode) (def-buffer "apps" "~/codes/autonomous_driving/src/localization/logic/hdl_localization/apps/" dired-mode) (def-buffer "hdl_localization<logic>" "~/codes/autonomous_driving/src/localization/logic/hdl_localization/" dired-mode) (def-buffer "src<autonomous_driving>" "~/codes/autonomous_driving/src/" dired-mode) (def-buffer "autonomous_driving" "~/codes/autonomous_driving/" dired-mode) (def-buffer "codes" "~/codes/" dired-mode) (def-buffer "tong" "~/" dired-mode) (def-buffer "下载" "~/下载/" dired-mode) (def-buffer "TODOs.org" "/home/tong/codes/autonomous_driving/src/localization/ros/TODOs.org" org-mode) (def-buffer "emacs-26.3" "~/下载/emacs-26.3/" dired-mode) (def-buffer "ndt_node.hh" "/home/tong/codes/autonomous_driving/src/localization/ros/ms_localization_ndt/include/ndt_node.hh" c++-mode) (def-buffer "include<ms_localization_ndt>" "~/codes/autonomous_driving/src/localization/ros/ms_localization_ndt/include/" dired-mode) (def-buffer "ms_localization_ndt" "~/codes/autonomous_driving/src/localization/ros/ms_localization_ndt/" dired-mode) (def-buffer "ros" "~/codes/autonomous_driving/src/localization/ros/" dired-mode) (def-buffer "logic" "~/codes/autonomous_driving/src/localization/logic/" dired-mode) (def-buffer "localization" "~/codes/autonomous_driving/src/localization/" dired-mode) (def-buffer "ndt_node.cc" "/home/tong/codes/autonomous_driving/src/localization/ros/ms_localization_ndt/src/ndt_node.cc" c++-mode)) (def-wconf (((min-height . 12) (min-width . 20) (min-height-ignore . 9) (min-width-ignore . 8) (min-height-safe . 3) (min-width-safe . 4) (min-pixel-height . 204) (min-pixel-width . 180) (min-pixel-height-ignore . 153) (min-pixel-width-ignore . 72) (min-pixel-height-safe . 51) (min-pixel-width-safe . 36)) vc (pixel-width . 1920) (pixel-height . 1039) (total-width . 213) (total-height . 61) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (hc (pixel-width . 1920) (pixel-height . 324) (total-width . 213) (total-height . 19) (normal-height . 0.306262230919765) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 959) (pixel-height . 324) (total-width . 106) (total-height . 19) (normal-height . 1.0) (normal-width . 0.4979101358411704) (buffer "ndt_node_params.hh" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 704) (start . 1))) (leaf (last . t) (pixel-width . 961) (pixel-height . 324) (total-width . 107) (total-height . 19) (normal-height . 1.0) (normal-width . 0.5020898641588297) (buffer "ndt_node.hh" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 907) (start . 674)))) (hc (last . t) (pixel-width . 1920) (pixel-height . 715) (total-width . 213) (total-height . 42) (normal-height . 0.6937377690802349) (normal-width . 1.0) (combination-limit) (vc (pixel-width . 994) (pixel-height . 715) (total-width . 110) (total-height . 42) (normal-height . 1.0) (normal-width . 0.5190600522193212) (combination-limit) (leaf (pixel-width . 994) (pixel-height . 438) (total-width . 110) (total-height . 26) (normal-height . 0.6052998605299862) (normal-width . 1.0) (buffer "ndt_node.cc" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 349) (start . 1))) (leaf (last . t) (pixel-width . 994) (pixel-height . 277) (total-width . 110) (total-height . 16) (normal-height . 0.3947001394700139) (normal-width . 1.0) (buffer "ndt_gpu_localization_nodelet.cpp" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 1635) (start . 1221)))) (vc (last . t) (pixel-width . 926) (pixel-height . 715) (total-width . 103) (total-height . 42) (normal-height . 1.0) (normal-width . 0.4809399477806794) (combination-limit) (leaf (pixel-width . 926) (pixel-height . 558) (total-width . 103) (total-height . 33) (normal-height . 0.7776223776223776) (normal-width . 1.0) (buffer "segmap_server.hh" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 305) (start . 122))) (leaf (last . t) (pixel-width . 926) (pixel-height . 157) (total-width . 103) (total-height . 9) (normal-height . 0.22237762237762237) (normal-width . 1.0) (buffer "segmap_server_node.hh" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 463) (start . 325))))))) (def-params ((gui-eyebrowse-last-slot . 1) (gui-eyebrowse-current-slot . 1) (gui-eyebrowse-window-configs (1 (((min-height . 12) (min-width . 20) (min-height-ignore . 9) (min-width-ignore . 8) (min-height-safe . 3) (min-width-safe . 4) (min-pixel-height . 204) (min-pixel-width . 180) (min-pixel-height-ignore . 153) (min-pixel-width-ignore . 72) (min-pixel-height-safe . 51) (min-pixel-width-safe . 36)) vc (pixel-width . 1920) (pixel-height . 1039) (total-width . 213) (total-height . 61) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (hc (pixel-width . 1920) (pixel-height . 324) (total-width . 213) (total-height . 19) (normal-height . 0.306262230919765) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 959) (pixel-height . 324) (total-width . 106) (total-height . 19) (normal-height . 1.0) (normal-width . 0.4979101358411704) (buffer "ndt_node_params.hh" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 704) (start . 1))) (leaf (last . t) (pixel-width . 961) (pixel-height . 324) (total-width . 107) (total-height . 19) (normal-height . 1.0) (normal-width . 0.5020898641588297) (buffer "ndt_node.hh" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 907) (start . 674)))) (hc (last . t) (pixel-width . 1920) (pixel-height . 715) (total-width . 213) (total-height . 42) (normal-height . 0.6937377690802349) (normal-width . 1.0) (combination-limit) (vc (pixel-width . 994) (pixel-height . 715) (total-width . 110) (total-height . 42) (normal-height . 1.0) (normal-width . 0.5190600522193212) (combination-limit) (leaf (pixel-width . 994) (pixel-height . 438) (total-width . 110) (total-height . 26) (normal-height . 0.6052998605299862) (normal-width . 1.0) (buffer "ndt_node.cc" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 349) (start . 1))) (leaf (last . t) (pixel-width . 994) (pixel-height . 277) (total-width . 110) (total-height . 16) (normal-height . 0.3947001394700139) (normal-width . 1.0) (buffer "ndt_gpu_localization_nodelet.cpp" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 1635) (start . 1221)))) (vc (last . t) (pixel-width . 926) (pixel-height . 715) (total-width . 103) (total-height . 42) (normal-height . 1.0) (normal-width . 0.4809399477806794) (combination-limit) (leaf (pixel-width . 926) (pixel-height . 558) (total-width . 103) (total-height . 33) (normal-height . 0.7776223776223776) (normal-width . 1.0) (buffer "segmap_server.hh" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 305) (start . 122))) (leaf (last . t) (pixel-width . 926) (pixel-height . 157) (total-width . 103) (total-height . 9) (normal-height . 0.22237762237762237) (normal-width . 1.0) (buffer "segmap_server_node.hh" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 463) (start . 325)))))) "")))) nil nil nil))